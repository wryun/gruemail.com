{"version":3,"file":"sw.js","sources":["../src/platform/web/assets/icon.png?url","../src/platform/web/sw.js"],"sourcesContent":["export default \"__VITE_ASSET__2a39c64c__\"","/*\nCopyright 2020 Bruno Windels <bruno@windels.cloud>\nCopyright 2020 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport NOTIFICATION_BADGE_ICON from \"./assets/icon.png?url\";\n// replaced by the service worker build plugin\nconst UNHASHED_PRECACHED_ASSETS = DEFINE_UNHASHED_PRECACHED_ASSETS;\nconst HASHED_PRECACHED_ASSETS = DEFINE_HASHED_PRECACHED_ASSETS;\nconst HASHED_CACHED_ON_REQUEST_ASSETS = DEFINE_HASHED_CACHED_ON_REQUEST_ASSETS;\n\nconst unhashedCacheName = `hydrogen-assets-${DEFINE_GLOBAL_HASH}`;\nconst hashedCacheName = `hydrogen-assets`;\nconst mediaThumbnailCacheName = `hydrogen-media-thumbnails-v2`;\n\nself.addEventListener('install', function(e) {\n    e.waitUntil((async () => {\n        const unhashedCache = await caches.open(unhashedCacheName);\n        await unhashedCache.addAll(UNHASHED_PRECACHED_ASSETS);\n        const hashedCache = await caches.open(hashedCacheName);\n        await Promise.all(HASHED_PRECACHED_ASSETS.map(async asset => {\n            if (!await hashedCache.match(asset)) {\n                await hashedCache.add(asset);\n            }\n        }));\n    })());\n});\n\nself.addEventListener('activate', (event) => {\n    // on a first page load/sw install,\n    // start using the service worker on all pages straight away\n    self.clients.claim();\n    event.waitUntil(purgeOldCaches());\n});\n\nasync function purgeOldCaches() {\n    // remove any caches we don't know about\n    const keyList = await caches.keys();\n    for (const key of keyList) {\n        if (key !== unhashedCacheName && key !== hashedCacheName && key !== mediaThumbnailCacheName) {\n            await caches.delete(key);\n        }\n    }\n    // remove the cache for any old hashed resource\n    const hashedCache = await caches.open(hashedCacheName);\n    const keys = await hashedCache.keys();\n    const hashedAssetURLs =\n        HASHED_PRECACHED_ASSETS\n        .concat(HASHED_CACHED_ON_REQUEST_ASSETS)\n        .map(a => new URL(a, self.registration.scope).href);\n\n    for (const request of keys) {\n        if (!hashedAssetURLs.some(url => url === request.url)) {\n            hashedCache.delete(request);\n        }\n    }\n}\n\nself.addEventListener('fetch', (event) => {\n    /*\n    service worker shouldn't handle xhr uploads because otherwise\n    the progress events won't fire.\n    This has to do with xhr not being supported in service workers.\n    */\n    if (event.request.method === \"GET\") {\n        event.respondWith(handleRequest(event.request));\n    }\n});\n\nfunction isCacheableThumbnail(url) {\n    if (url.pathname.startsWith(\"/_matrix/media/r0/thumbnail/\")) {\n        const width = parseInt(url.searchParams.get(\"width\"), 10);\n        const height = parseInt(url.searchParams.get(\"height\"), 10);\n        if (width <= 50 && height <= 50) {\n            return true;\n        }\n    }\n    return false;\n}\n\nconst baseURL = new URL(self.registration.scope);\nlet pendingFetchAbortController = new AbortController();\n\nasync function handleRequest(request) {\n    try {\n        if (request.url.includes(\"config.json\") || /theme-.+\\.json/.test(request.url)) {\n            return handleStaleWhileRevalidateRequest(request);\n        }\n        const url = new URL(request.url);\n        // rewrite / to /index.html so it hits the cache\n        if (url.origin === baseURL.origin && url.pathname === baseURL.pathname) {\n            request = new Request(new URL(\"index.html\", baseURL.href));\n        }\n        let response = await readCache(request);\n        if (!response) {\n            // use cors so the resource in the cache isn't opaque and uses up to 7mb\n            // https://developers.google.com/web/tools/chrome-devtools/progressive-web-apps?utm_source=devtools#opaque-responses\n            if (isCacheableThumbnail(url)) {\n                response = await fetch(request, {signal: pendingFetchAbortController.signal, mode: \"cors\", credentials: \"omit\"});\n            } else {\n                response = await fetch(request, {signal: pendingFetchAbortController.signal});\n            }\n            await updateCache(request, response);\n        }\n        return response;\n    } catch (err) {\n        if (err.name !== \"TypeError\" && err.name !== \"AbortError\") {\n            console.error(\"error in service worker\", err);\n        }\n        throw err;\n    }\n}\n\n/**\n * Stale-while-revalidate caching for certain files\n * see https://developer.chrome.com/docs/workbox/caching-strategies-overview/#stale-while-revalidate\n */\nasync function handleStaleWhileRevalidateRequest(request) {\n    let response = await readCache(request);\n    const networkResponsePromise = fetchAndUpdateCache(request);\n    if (response) {\n        return response;\n    } else {\n        return await networkResponsePromise;\n    }\n}\n\nasync function fetchAndUpdateCache(request) {\n    const response = await fetch(request, {\n        signal: pendingFetchAbortController.signal,\n        headers: {\n            \"Cache-Control\": \"no-cache\",\n        },\n    });\n    updateCache(request, response.clone());\n    return response;\n}\n\nasync function updateCache(request, response) {\n    // don't write error responses to the cache\n    if (response.status >= 400) {\n        return;\n    }\n    const url = new URL(request.url);\n    const baseURL = self.registration.scope;\n    if (isCacheableThumbnail(url)) {\n        const cache = await caches.open(mediaThumbnailCacheName);\n        cache.put(request, response.clone());\n    } else if (request.url.startsWith(baseURL)) {\n        let assetName = request.url.substr(baseURL.length);\n        let cacheName;\n        if (HASHED_CACHED_ON_REQUEST_ASSETS.includes(assetName)) {\n            cacheName = hashedCacheName;\n        } else if (UNHASHED_PRECACHED_ASSETS.includes(assetName)) {\n            cacheName = unhashedCacheName;\n        }\n        if (cacheName) {\n            const cache = await caches.open(cacheName);\n            await cache.put(request, response.clone());\n        }\n    }\n}\n\nasync function readCache(request) {\n    const unhashedCache = await caches.open(unhashedCacheName);\n    let response = await unhashedCache.match(request);\n    if (response) {\n        return response;\n    }\n    const hashedCache = await caches.open(hashedCacheName);\n    response = await hashedCache.match(request);\n    if (response) {\n        return response;\n    }\n    \n    const url = new URL(request.url);\n    if (isCacheableThumbnail(url)) {\n        const mediaThumbnailCache = await caches.open(mediaThumbnailCacheName);\n        response = await mediaThumbnailCache.match(request);\n        // added in 0.1.26, remove previously cached error responses, remove this in some time\n        if (response?.status >= 400) {\n            await mediaThumbnailCache.delete(request);\n            response = null;\n        }\n    }\n    return response;\n}\n\nself.addEventListener('message', (event) => {\n    const reply = payload => event.source.postMessage({replyTo: event.data.id, payload});\n    const {replyTo} = event.data;\n    if (replyTo) {\n        const resolve = pendingReplies.get(replyTo);\n        if (resolve) {\n            pendingReplies.delete(replyTo);\n            resolve(event.data.payload);\n        }\n    } else {\n        switch (event.data?.type) {\n            case \"version\":\n                reply({version: DEFINE_VERSION, buildHash: DEFINE_GLOBAL_HASH});\n                break;\n            case \"skipWaiting\":\n                self.skipWaiting();\n                break;\n            case \"haltRequests\":\n                event.waitUntil(haltRequests().finally(() => reply()));\n                break;\n            case \"closeSession\":\n                event.waitUntil(\n                    closeSession(event.data.payload.sessionId, event.source.id)\n                        .finally(() => reply())\n                );\n                break;\n        }\n    }\n});\n\nconst NOTIF_TAG_NEW_MESSAGE = \"new_message\";\n\nasync function openClientFromNotif(event) {\n    if (event.notification.tag !== NOTIF_TAG_NEW_MESSAGE) {\n        console.log(\"clicked notif with tag\", event.notification.tag);\n        return;\n    }\n    const {sessionId, roomId} = event.notification.data;\n    const sessionHash = `#/session/${sessionId}`;\n    const roomHash = `${sessionHash}/room/${roomId}`;\n    const clientWithSession = await findClient(async client => {\n        return await sendAndWaitForReply(client, \"hasSessionOpen\", {sessionId});\n    });\n    if (clientWithSession) {\n        console.log(\"notificationclick: client has session open, showing room there\");\n        // use a message rather than clientWithSession.navigate here as this refreshes the page on chrome\n        clientWithSession.postMessage({type: \"openRoom\", payload: {roomId}});\n        if ('focus' in clientWithSession) {\n            try {\n                await clientWithSession.focus();\n            } catch (err) { console.error(err); } // I've had this throw on me on Android\n        }\n    } else if (self.clients.openWindow) {\n        console.log(\"notificationclick: no client found with session open, opening new window\");\n        const roomURL = new URL(`./${roomHash}`, baseURL).href;\n        await self.clients.openWindow(roomURL);\n    }\n}\n\nself.addEventListener('notificationclick', event => {\n    event.notification.close();\n    event.waitUntil(openClientFromNotif(event));\n});\n\nasync function handlePushNotification(n) {\n    console.log(\"got a push message\", n);\n    const sessionId = n.session_id;\n    let sender = n.sender_display_name || n.sender;\n    if (sender && n.event_id) {\n        const roomId = n.room_id;\n        const hasFocusedClientOnRoom = !!await findClient(async client => {\n            if (client.visibilityState === \"visible\" && client.focused) {\n                return await sendAndWaitForReply(client, \"hasRoomOpen\", {sessionId, roomId});\n            }\n        });\n        if (hasFocusedClientOnRoom) {\n            console.log(\"client is focused, room is open, don't show notif\");\n            return;\n        }\n        const newMessageNotifs = Array.from(await self.registration.getNotifications({tag: NOTIF_TAG_NEW_MESSAGE}));\n        const notifsForRoom = newMessageNotifs.filter(n => n.data.roomId === roomId);\n        const hasMultiNotification = notifsForRoom.some(n => n.data.multi);\n        const hasSingleNotifsForRoom = newMessageNotifs.some(n => !n.data.multi);\n        const roomName = n.room_name || n.room_alias;\n        let multi = false;\n        let label;\n        let body;\n        if (hasMultiNotification) {\n            console.log(\"already have a multi message, don't do anything\");\n            return;\n        } else if (hasSingleNotifsForRoom) {\n            console.log(\"showing multi message notification\");\n            multi = true;\n            label = roomName || sender;\n            body = \"New messages\";\n        } else {\n            console.log(\"showing new message notification\");\n            if (roomName && roomName !== sender) {\n                label = `${sender} in ${roomName}`;\n            } else {\n                label = sender;\n            }\n            body = n.content?.body || \"New message\";\n        }\n        await self.registration.showNotification(label, {\n            body,\n            data: {sessionId, roomId, multi},\n            tag: NOTIF_TAG_NEW_MESSAGE,\n            badge: NOTIFICATION_BADGE_ICON\n        });\n    }\n    // we could consider hiding previous notifications here based on the unread count\n    // (although we can't really figure out which notifications to hide) and also hiding\n    // notifications makes it hard to ensure we always show a notification after a push message\n    // when no client is visible, see https://goo.gl/yqv4Q4\n}\n\nself.addEventListener('push', event => {\n    event.waitUntil(handlePushNotification(event.data.json()));\n});\n\nasync function closeSession(sessionId, requestingClientId) {\n    const clients = await self.clients.matchAll();\n    await Promise.all(clients.map(async client => {\n        if (client.id !== requestingClientId) {\n            await sendAndWaitForReply(client, \"closeSession\", {sessionId});\n        }\n    }));\n}\n\nasync function haltRequests() {\n    // first ask all clients to block sending any more requests\n    const clients = await self.clients.matchAll({type: \"window\"});\n    await Promise.all(clients.map(client => {\n        return sendAndWaitForReply(client, \"haltRequests\");\n    }));\n    // and only then abort the current requests\n    pendingFetchAbortController.abort();\n}\n\nconst pendingReplies = new Map();\nlet messageIdCounter = 0;\nfunction sendAndWaitForReply(client, type, payload) {\n    messageIdCounter += 1;\n    const id = messageIdCounter;\n    const promise = new Promise(resolve => {\n        pendingReplies.set(id, resolve);\n    });\n    client.postMessage({type, id, payload});\n    return promise;\n}\n\nasync function findClient(predicate) {\n    const clientList = await self.clients.matchAll({type: \"window\"});\n    for (const client of clientList) {\n        if (await predicate(client)) {\n            return client;\n        }\n    }\n}\n"],"names":[],"mappings":"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"}